@model FE_QUEJAS.Models.Queja

@{
    ViewBag.Title = "TipoQueja";
    Layout = ViewBag.Layout;
}

<div class="container" style="margin-top: 15px; margin-bottom: 15px">
    <div class="card" style="margin-top: 15px">
        <h5 class="card-header">Ingreso de Queja</h5>
        <div class="card-body">
            <div class="row">
                <div class="col-2">
                </div>
                <div class="col-8">
                    @using (Html.BeginForm("guardarQueja", "IngresoQuejaCliente", new { tipo = @ViewBag.ModalAccion, id = @ViewBag.IdTipo }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        <div>
                            @Html.LabelFor(model => model.Tipo_Queja, htmlAttributes: new { @class = "form-label fw-bold" })
                            @Html.DropDownListFor(model => model.Tipo_Queja, (List<SelectListItem>)ViewBag.TiposSelectList, "Seleccionar Tipo de Queja", new { @class = "form-select", })
                            @Html.ValidationMessageFor(model => model.Tipo_Queja, "", new { @class = "text-danger control-label text-center" })
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Nombres, htmlAttributes: new { @class = "form-label fw-bold" })
                            @Html.EditorFor(model => model.Nombres, new { htmlAttributes = new { @class = "form-control", id = "txtSiglasQueja" } })
                            @Html.ValidationMessageFor(model => model.Nombres, "", new { @class = "text-danger control-label" })
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Apellidos, htmlAttributes: new { @class = "form-label fw-bold" })
                            @Html.EditorFor(model => model.Apellidos, new { htmlAttributes = new { @class = "form-control", id = "txtSiglasQueja" } })
                            @Html.ValidationMessageFor(model => model.Apellidos, "", new { @class = "text-danger control-label" })
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "form-label fw-bold" })
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", id = "txtSiglasQueja" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger control-label" })
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "form-label fw-bold" })
                            @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control", type = "number", oninput = "this.value = this.value.replace(/[eE]/g, '')", pattern = "\\d{0,8}" } })
                            @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger control-label" })
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Detalle, htmlAttributes: new { @class = "form-label fw-bold" })
                            @Html.TextAreaFor(model => model.Detalle, new { @class = "form-control", id = "txtSiglasQueja" })
                            @Html.ValidationMessageFor(model => model.Detalle, "", new { @class = "text-danger control-label" })
                        </div>
                        <div>

                            <label for="archivo" class="form-label fw-bold">Seleccionar archivo:</label>
                            <input type="file" id="archivo" name="ArchivoAdjunto" class="form-control">
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-12 text-end">
                                <button type="submit" name="btnGuardar" id="guardarModal" class="btn btn-dark my-action-link">
                                    Guardar <i class="fa fa-save"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="modalNotificacion" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">

            <div id="headerNotificacion" class="modal-header">
                <h5 class="modal-title text-white">Notificación del sistema</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="mensajeNotificacion"></p>
            </div>
            <div class="modal-footer">
                <button type="button" id="btnCerrarNotificacion" class="btn" data-bs-dismiss="modal" aria-label="Close" onclick="redireccionarControlador()"><i class="fa fa-minus"></i> Cerrar</button>
            </div>

        </div>
    </div>
</div>
@section Scripts{
    <script>
        var archivoInput = document.getElementById('archivo');
        archivoInput.addEventListener('change', validarArchivo);

        function validarArchivo() {
            var archivo = archivoInput.files[0];
            var maxSize = 10 * 1024 * 1024; // Tamaño máximo en bytes (10 MB)
            var allowedExtensions = ['jpg', 'jpeg', 'png', 'xlsx', 'xls', 'pdf', 'doc', 'docx']; // Extensiones permitidas

            // Validar el tamaño del archivo
            if (archivo.size > maxSize) {
                alert('El archivo debe tener un tamaño menor a 10 MB');
                archivoInput.value = ''; // Limpiar el campo de archivo seleccionado
                return;
            }

            // Obtener la extensión del archivo
            var extension = archivo.name.split('.').pop().toLowerCase();

            // Validar la extensión del archivo
            if (!allowedExtensions.includes(extension)) {
                alert('El archivo debe tener una de las siguientes extensiones: ' + allowedExtensions.join(', '));
                archivoInput.value = ''; // Limpiar el campo de archivo seleccionado
                return;
            }

            // Si se pasa todas las validaciones, puedes continuar con el procesamiento del archivo
            console.log('Archivo válido');
        }
    </script>
    <script>
        function redireccionarControlador() {
            // Redirige al controlador y acción deseada
            window.location.href = '/MenuPrincipal/Bienvenida';
        }
    </script>
    @if (ViewBag.MostrarModal != null && ViewBag.MostrarModal)
    {
        <script>
            function mostrarNotificacion(tipo, mensaje) {
                var claseEnc = definirTipoNotificacion(tipo, "Encabezado");
                var claseBoton = definirTipoNotificacion(tipo, "Boton");
                var header = document.getElementById("headerNotificacion");
                header.className = claseEnc;
                var btnCerrarNotificacion = document.getElementById("btnCerrarNotificacion");
                btnCerrarNotificacion.className = claseBoton;
                var mensajeNotificaion = document.getElementById("mensajeNotificacion");
                mensajeNotificaion.innerHTML = '<i class="fa fa-comments-o"></i> ' + mensaje;
                //mensajeNotificaion.textContent = mensaje;
                var modalNotificacion = new bootstrap.Modal(document.getElementById('modalNotificacion'), {
                    backdrop: 'static',
                    keyboard: false
                });
                modalNotificacion.show();
            }


            function definirTipoNotificacion(tipo, elemento) {
                if (tipo == 1) {
                    claseEnc = "modal-header bg-black";
                    claseBoton = "btn btn-outline-dark";
                } else if (tipo == 2) {
                    claseEnc = "modal-header bg-info";
                    claseBoton = "btn btn-danger";
                } else if (tipo == 3) {
                    claseEnc = "modal-header bg-danger";
                    claseBoton = "btn btn-danger";
                } else if (tipo == 4) {
                    claseEnc = "modal-header bg-warning";
                    claseBoton = "btn btn-danger";
                }
                if (elemento == "Boton") {
                    return claseBoton;
                } else {
                    return claseEnc;
                }
            }

            $(document).ready(function () {
                var mensaje = "@ViewBag.Mensaje";
                var tipo = @ViewBag.Tipo;
                mostrarNotificacion(tipo, mensaje);
            });
        </script>

    }
}
